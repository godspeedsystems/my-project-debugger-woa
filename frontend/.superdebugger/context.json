{
  "repoMap": "\nbackend/src/datasources/types/tokenjs.ts:\n⋮...\n│\n│interface TokenJSConfig {\n│    provider: LLMProvider;\n⋮...\n│    protected async initClient(): Promise<object> {\n│        const yamlconfig =  (this.config as {config : TokenJSConfig}).config ;   \n⋮...\n│    console.log(\"Hello\")\n⋮...\n\nfrontend/src/utils/ProjectContextGatherer.ts:\n⋮...\n│  platform: string;\n⋮...\n│  [key: string]: {\n⋮...\n│  dependencies: Record<string, string>;\n⋮...\n│  branch: string | null;\n⋮...\n│  name: string;\n⋮...\n│  timestamp: string;\n⋮...\n│  private projectPath: string;\n│\n⋮...\n│    this.projectPath = projectPath;\n⋮...\n│    try {\n⋮...\n│    const structure: ProjectStructure = {};\n│    \n⋮...\n│    try {\n⋮...\n│    try {\n⋮...\n│    try {\n⋮...\n│    const sensitivePatterns = [\n⋮...\n│    const info = await this.gatherEnvironmentInfo();\n│    \n⋮...\n│    let output = '';\n⋮...\n│  const gatherer = new ProjectContextGatherer(process.cwd());\n⋮...\n\nfrontend/src/utils/ripgrepContext.ts:\n⋮...\n│  filePath: string;\n⋮...\n│  errorFile: string;\n⋮...\n│  private directory: string;\n│\n⋮...\n│    this.directory = directory;\n⋮...\n│    return new Promise((resolve, reject) => {\n⋮...\n│    try {\n⋮...\n│    const lines: string[] = [];\n│    \n⋮...\n\nfrontend/src/types/conversation.ts:\n⋮...\n│  id: string;           // Add unique ID for each message\n⋮...\n│  id: string;\n⋮...\n\nbackend/src/functions/context-search.ts:\n⋮...\n│    name: string;\n⋮...\n\nfrontend/src/types/common.ts:\n⋮...\n│  name: string;\n⋮...\n\nfrontend/src/utils/conversationManager.ts:\n⋮...\n│  private sessionsPath: string;\n⋮...\n│    this.sessionsPath = path.join(baseDir, '.superdebugger', 'sessions');\n⋮...\n│    await fs.mkdir(this.sessionsPath, { recursive: true });\n⋮...\n│    const session: ConversationSession = {\n⋮...\n│    const session = await this.loadSession(sessionId);\n⋮...\n│    const filePath = path.join(this.sessionsPath, `${sessionId}.json`);\n⋮...\n│    const filePath = path.join(this.sessionsPath, `${session.id}.json`);\n⋮...\n│    const files = await fs.readdir(this.sessionsPath);\n⋮...\n│    sessionId: string,\n⋮...\n│    sessionId: string,\n⋮...\n│    const session = this.sessions.get(sessionId);\n⋮...\n\n"
}